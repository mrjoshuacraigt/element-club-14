name: App build
on: 
  push:
    branches: [main]
    paths:
     - ".github/workflows/**"
     - "**/*.swift"
  

jobs:
  build_with_signing:
    runs-on: macos-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Install the Apple certificate and provisioning profile
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          # apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles

      - name: iOS app
        run: |
         echo xcodebuild -list
         xcodebuild -scheme "Actions Production" clean archive -archivePath "Actions" -configuration "Release Production"

      - name: export ipa
        env:
          EXPORT_PLIST: ${{ secrets.IOS_EXPORT_PORDUCTION }}
        run: |
          # crete export options
          EXPORT_PLIST_PATH=$RUNNER_TEMP/ExportOptions.plist
          echo -n "$EXPORT_PLIST' | base64 --decode --output $EXPORT_PLIST_PATH
          xcodebuild -exportArchive -archivePath $GITHUB_WORKSPACE/Actions.xcarchive -exportOptionsPlist $EXPORT_PLIST_PATH -exportPath $RUNNER_TEMP/export

#      - name: Upload ipa
#        uses: actions/upload-artifact@master
#        with:
#          path: path to output

#      - name: Rename the file, remove whitespace
#        run: |
#            echo Export directory contents:
#            ls /Users/cobemacmini/ios-runner/_work/_temp/export/
#            mv "/Users/cobemacmini/ios-runner/_work/_temp/export/Actions Production.ipa" "/Users/cobemacmini/los-runner/_work/_temp/export/ActionsProduction.ipa"
#            ls /Users/cobemacmini/ios-runner/_work/_temp/export/
#
#      - name: Decode auth. api key file and saveit
#        env:
#          API_KEY_BASE64: ${{ secrets.APPSTORE_API_PRIVATE_KEY }}
#        run: |
#            ls ~/private_keys
#            echo -n "$API_KEY_BASE64" | base64 --decode --output ~/private_keys/AuthKey_${{ secrets.APPSTORE_API_KEY_ID }}.p8
#            echo "After savings: "
#            ls ~/private_keys
#            xcrun altool — validate-app -f [path/to/.ipa] -t ios — apiKey ${{ secrets.APPSTORE_API_KEY_ID }} — apiIssuer ${{ secrets.APPSTORE_ISSUER_ID }}
#            xcrun altool — upload-app -f [path/to/.ipa] -t ios — apiKey “${{ secrets.APPSTORE_API_KEY_ID }}” — apiIssuer “${{ secrets.APPSTORE_ISSUER_ID }}”
